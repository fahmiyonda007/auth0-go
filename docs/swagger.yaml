basePath: /api/v1
definitions:
  controllers.BookOutput:
    properties:
      author:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  controllers.CreateBookInput:
    properties:
      author:
        type: string
      title:
        type: string
    required:
    - author
    - title
    type: object
  controllers.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  controllers.LoginOutput:
    properties:
      data:
        type: string
    type: object
  handler.JSONResult:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: yondadf04@gmail.com
    name: Fahmi Yonda
    url: https://instagram.com/fahmiyonda
  description: A book management service API in Go using Gin framework GORM and Auth0.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://tos.santoshk.dev
  title: Gin Book Service
  version: "1.0"
paths:
  /books:
    get:
      consumes:
      - application/json
      description: get all books
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: length
        in: query
        name: length
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.BookOutput'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.JSONResult'
      security:
      - BearerAuth: []
      summary: get all books
      tags:
      - Books
    post:
      consumes:
      - application/json
      description: Create new book
      parameters:
      - description: Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateBookInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.BookOutput'
            type: array
      security:
      - BearerAuth: []
      summary: Create new book
      tags:
      - Books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a book
      parameters:
      - description: id
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.BookOutput'
            type: array
      security:
      - BearerAuth: []
      summary: Delete a book
      tags:
      - Books
    get:
      consumes:
      - application/json
      description: find a book by id
      parameters:
      - description: id
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.BookOutput'
            type: array
      security:
      - BearerAuth: []
      summary: find a book by id
      tags:
      - Books
    patch:
      consumes:
      - application/json
      description: Update a book
      parameters:
      - description: id
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.BookOutput'
            type: array
      security:
      - BearerAuth: []
      summary: Update a book
      tags:
      - Books
  /login:
    post:
      consumes:
      - application/json
      description: login with auth0 user
      parameters:
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginOutput'
      summary: auth0
      tags:
      - Authentication
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
